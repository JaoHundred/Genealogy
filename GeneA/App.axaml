<Application xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             x:Class="GeneA.App"
             xmlns:loc="clr-namespace:GeneA.Lang;assembly=GeneA"
             xmlns:model="clr-namespace:ModelA.Core;assembly=ModelA"
             xmlns:IVM="clr-namespace:GeneA.ViewModelItems;assembly=GeneA"
             xmlns:vm="clr-namespace:GeneA.ViewModels;assembly=GeneA"
             xmlns:conv="clr-namespace:GeneA.Converters;assembly=GeneA"
             xmlns:controls="using:GeneA.CustomControls"
             xmlns:icon="https://github.com/projektanker/icons.avalonia"
             xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
             xmlns:ia="clr-namespace:Avalonia.Xaml.Interactions.Core;assembly=Avalonia.Xaml.Interactions"
             RequestedThemeVariant="Default">
  <!-- "Default" ThemeVariant follows system theme variant. "Dark" or "Light" are other available options. -->


  <Application.Resources>

    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceInclude Source="/AppTheme/Colors.axaml"/>
      </ResourceDictionary.MergedDictionaries>
    </ResourceDictionary>
  </Application.Resources>

  <Application.Styles>
    <FluentTheme/>
    <StyleInclude Source="/CustomControls/PopupBase.axaml"/>
    <StyleInclude Source="avares://Notification.Avalonia/Themes/Generic.xaml" />
    <StyleInclude Source="avares://Avalonia.Controls.DataGrid/Themes/Fluent.xaml"/>


    <Style Selector="Grid#FullViewGrid">
      <Setter Property="Background"
              Value="{DynamicResource AppBackgroundColor}"/>
    </Style>

    <Style Selector="ListBox">
      <Setter Property="Background" Value="Transparent"/>
    </Style>

    <Style Selector="CalendarDatePicker">
      <Setter Property="CustomDateFormatString" Value="dd/MM/yyyy"/>
      <Setter Property="HorizontalAlignment" Value="Stretch"/>
      <Setter Property="IsTodayHighlighted" Value="True"/>
    </Style>

    <Style Selector="TextBlock">
      <Setter Property="FontSize" Value="18"/>
      <Setter Property="TextTrimming" Value="CharacterEllipsis"/>
      <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
    </Style>

    <Style Selector="TextBlock.header">
      <Setter Property="FontSize" Value="18"/>
      <Setter Property="FontWeight" Value="SemiBold"/>
      <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
    </Style>

    <Style Selector="TextBox">
      <Setter Property="FontSize" Value="16"/>
      <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
    </Style>

    <Style Selector="ComboBox">
      <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>

    <Style Selector="Grid.Default>Button">
      <Setter Property="HorizontalContentAlignment" Value="Center"/>
      <Setter Property="VerticalContentAlignment" Value="Center"/>
      <Setter Property="Height" Value="50"/>
    </Style>

    <Style Selector="Grid.TextLabel>TextBlock">
      <Setter Property="Padding" Value="0,10,0,0"/>
    </Style>

    <Style Selector="icon|Icon">
      <Setter Property="FontSize" Value="22"/>
    </Style>

    <Style Selector="RadioButton.iconButton">

      <Style Selector="^ /template/ Ellipse">
        <Setter Property="IsVisible" Value="False"/>
      </Style>

      <Style Selector="^ TextBlock">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="#e3ffff"/>
      </Style>
      <Style Selector="^ icon|Icon">

        <Setter Property="Foreground" Value="#e3ffff"/>
      </Style>

      <Style Selector="^:checked Border.radioBorder">
        <Setter Property="Background" Value="DarkBlue"/>
        <Setter Property="CornerRadius" Value="40"/>
      </Style>
      <Style Selector="^:checked TextBlock">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="White"/>
      </Style>
      <Style Selector="^:checked icon|Icon">
        <Setter Property="Foreground" Value="White"/>
      </Style>
    </Style>

    <Style Selector="Button.default">

      <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>

      <Style Selector="^ TextBlock">
        <Setter Property="Foreground" Value="White"/>
      </Style>
      <Style Selector="^:disabled TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForeground}"/>
      </Style>

      <Style Selector="^ /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AddButtonColor}"/>
        <Setter Property="Foreground" Value="White"/>

      </Style>
      <Style Selector="^:pointerover /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AddButtonPressedColor}"/>
      </Style>
      <Style Selector="^:pressed /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AddButtonPressedColor}"/>
      </Style>
      <Style Selector="^:disabled /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource ButtonDisabledBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForeground}"/>

      </Style>
    </Style>

    <Style Selector="Button.round">
      <Setter Property="CornerRadius" Value="50"/>
      <Setter Property="Height" Value="60"/>
      <Setter Property="Width" Value="60"/>
    </Style>

    <Style Selector="Button>TextBlock">
      <Setter Property="VerticalAlignment" Value="Center"/>
      <Setter Property="HorizontalAlignment" Value="Center"/>
      <Setter Property="FontWeight" Value="SemiBold"/>
      <Setter Property="FontSize" Value="24"/>
    </Style>

    <Style Selector="Border#BottomMenu">
      <Setter Property="CornerRadius" Value="30,30,0,0"/>
      <Setter Property="Background" Value="#596e87"/>
      <Setter Property="Height" Value="50"/>

      <Style Selector="^Grid>Button">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="WhiteSmoke"/>
      </Style>
    </Style>

    <Style Selector="Button.round.newButton">
      <Style Selector="^ /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AddButtonColor}"/>
        <Setter Property="Foreground" Value="White"/>
      </Style>
      <Style Selector="^:pointerover /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AddButtonPressedColor}"/>
      </Style>
      <Style Selector="^:pressed /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource AddButtonPressedColor}"/>
      </Style>
    </Style>

    <Style Selector="UserControl.popupOuter">
      <Setter Property="Background" Value="{DynamicResource PopupOuterColor}"/>
    </Style>

    <Style Selector="Grid.popupBackground">
      <Setter Property="Background" Value="{DynamicResource PopupBackground}"/>
    </Style>

    <Style Selector="Border.popup">
      <Setter Property="BorderThickness" Value="10"/>
      <Setter Property="CornerRadius" Value="5"/>
      <Setter Property="BorderBrush" Value="{DynamicResource PopupBorderColor}"/>
      <Setter Property="Margin" Value="40"/>
      <Setter Property="VerticalAlignment" Value="Center"/>
      <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>

    <Style Selector="TextBlock.popupHeader">
      <Setter Property="Margin" Value="5"/>
      <Setter Property="HorizontalAlignment" Value="Center"/>
      <Setter Property="FontSize" Value="20"/>
      <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style Selector="Button.dialogButton">
      <Setter Property="HorizontalAlignment" Value="Stretch"/>
      <Setter Property="HorizontalContentAlignment" Value="Center"/>
      <Setter Property="Margin" Value="4,3"/>

      <Style Selector="^ TextBlock">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
      </Style>

    </Style>


    <Style Selector="Button.cancelButton">

      <Style Selector="^ TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource CancelButtonForeground}"/>
      </Style>

      <Style Selector="^:pointerover TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource CancelButtonPressedForeground}"/>
      </Style>

      <Style Selector="^:pressed TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource CancelButtonPressedForeground}"/>
      </Style>

      <Style Selector="^:disabled TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForeground}"/>
      </Style>

      <Style Selector="^ /template/ ContentPresenter">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource CancelButtonForeground}"/>
      </Style>

      <Style Selector="^:pointerover /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource CancelButtonPressedBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource CancelButtonPressedForeground}"/>
      </Style>

      <Style Selector="^:pressed /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource CancelButtonPressedBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource CancelButtonPressedForeground}"/>
      </Style>

      <Style Selector="^:disabled /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource ButtonDisabledBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForeground}"/>
      </Style>

    </Style>

    <Style Selector="Button.cancelButton.disabledTransparentBackground">

      <Style Selector="^:disabled /template/ ContentPresenter">
        <Setter Property="Background" Value="Transparent"/>
      </Style>

    </Style>

    <Style Selector="Button.confirmButton">

      <Style Selector="^ TextBlock">
        <Setter Property="Foreground" Value="White"/>
      </Style>

      <Style Selector="^:disabled TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForeground}"/>
      </Style>

      <Style Selector="^ /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource ConfirmButtonBackground}"/>
        <Setter Property="Foreground" Value="White"/>
      </Style>

      <Style Selector="^:pointerover /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource ConfirmButtonPressedBackground}"/>
      </Style>

      <Style Selector="^:pressed /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource ConfirmButtonPressedBackground}"/>
      </Style>

      <Style Selector="^:disabled /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource ButtonDisabledBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonDisabledForeground}"/>
      </Style>

    </Style>

    <Style Selector="Button.treeButton">

      <Setter Property="FontWeight" Value="SemiBold"/>
      <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
      
      <Style Selector="^ /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource PopupButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PopupButtonBackground}"/>
      </Style>
      <Style Selector="^:pressed /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource PopupButtonPressedBackground}"/>
        <Setter Property="Foreground" Value="White"/>
      </Style>
      <Style Selector="^:pointerover /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource PopupButtonPressedBackground}"/>
        <Setter Property="Foreground" Value="White"/>
      </Style>
      <Style Selector="^ TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource PopupButtonForeground}"/>
      </Style>
      <Style Selector="^:pointerover TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource PopupButtonPressedForeground}"/>
      </Style>
      <Style Selector="^:pressed TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource PopupButtonPressedForeground}"/>
      </Style>

    </Style>


    <Style Selector="Button.filter">
      <Style Selector="^ /template/ ContentPresenter">
        <Setter Property="Background" Value="Transparent"/>
      </Style>

      <Style Selector="^ TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource FilterButtonForeground}"/>
      </Style>

      <Style Selector="^:pointerover TextBlock">
        <Setter Property="Foreground" Value="White"/>
      </Style>

      <Style Selector="^:pressed TextBlock">
        <Setter Property="Foreground" Value="White"/>
      </Style>

      <Style Selector="^:pointerover  /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource FilterButtonPressedBackground}"/>
        <Setter Property="Foreground" Value="White"/>
      </Style>
      <Style Selector="^:pressed  /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource FilterButtonPressedBackground}"/>
        <Setter Property="Foreground" Value="White"/>
      </Style>
    </Style>

    <Style Selector="Button.backButton">
      <Style Selector="^ /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource BackButtonBackground}"/>
        <Setter Property="Foreground" Value="White"/>
      </Style>
      <Style Selector="^:pointerover /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource BackButtonPressedBackground}"/>
      </Style>
      <Style Selector="^:pressed /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource BackButtonPressedBackground}"/>
      </Style>
    </Style>

    <Style Selector="Button.PopupButton">
      <Setter Property="CornerRadius" Value="10,0,10,0"/>
      <Setter Property="HorizontalAlignment" Value="Stretch"/>
      <Setter Property="HorizontalContentAlignment" Value="Center"/>
      <Setter Property="Height" Value="30"/>

      <Style Selector="^ /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource PopupButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource PopupButtonBorder}"/>
      </Style>
      <Style Selector="^:pressed /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource PopupButtonPressedBackground}"/>
        <Setter Property="Foreground" Value="White"/>
      </Style>
      <Style Selector="^:pointerover /template/ ContentPresenter">
        <Setter Property="Background" Value="{DynamicResource PopupButtonPressedBackground}"/>
        <Setter Property="Foreground" Value="White"/>
      </Style>
      <Style Selector="^ TextBlock">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="{DynamicResource PopupButtonForeground}"/>
      </Style>
      <Style Selector="^:pointerover TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource PopupButtonPressedForeground}"/>
      </Style>
      <Style Selector="^:pressed TextBlock">
        <Setter Property="Foreground" Value="{DynamicResource PopupButtonPressedForeground}"/>
      </Style>

    </Style>

    <Style Selector="SplitView">
      <Setter Property="PaneBackground" Value="{DynamicResource AppBackgroundColor}"/>

      <Style Selector="^ Border">
        <Setter Property="BorderBrush" Value="{DynamicResource SplitViewBorder}"/>
      </Style>
    </Style>

    <Style Selector="Button.buttonLabel">
      <Setter Property="Background" Value="Transparent"/>

      <Style Selector="^:pointerover /template/ ContentPresenter">
        <Setter Property="Background" Value="Transparent"/>
      </Style>
      <Style Selector="^:pressed /template/ ContentPresenter">
        <Setter Property="Background" Value="Transparent"/>
      </Style>
      <Style Selector="^:disabled /template/ ContentPresenter">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="Black"/>
      </Style>
    </Style>

    <Style Selector="Border.menuFrame">
      <Setter Property="Margin" Value="0,10,0,0"/>
      <Setter Property="BorderBrush" Value="{DynamicResource MenuFrameBorder}"/>
      <Setter Property="Background" Value="{DynamicResource MenuFrameBackground}"/>
      <Setter Property="BorderThickness" Value="3"/>
      <Setter Property="CornerRadius" Value="10, 0, 10, 0"/>
    </Style>

    <Style Selector="DataGrid">
      <Setter Property="Background" Value="{DynamicResource AppBackgroundColor}"/>
    </Style>

  </Application.Styles>

  <Application.Resources>

    <conv:BirthDeathConverter x:Key="BirthDeathDateConv"/>
    <conv:ValidDatetimeConverter x:Key="ValidDatetimeConv"/>
    <conv:PersonEmptyFieldsConverter x:Key="PersonEmptyFieldsConv"/>

    <DataTemplate x:Key="ListTemplate" x:DataType="model:Person">
      <Grid RowDefinitions="auto auto, auto"
            ColumnDefinitions="* auto *">

        <TextBlock Grid.Column="1"  Text="{Binding Name}" TextTrimming="CharacterEllipsis"
                     HorizontalAlignment="Center"
                     TextWrapping="Wrap" Margin="0,0,0,5"
                     FontWeight="SemiBold"/>

        <Grid Grid.Row="1" Grid.Column="1" RowDefinitions="* *" ColumnDefinitions="* *"
              HorizontalAlignment="Center">

          <TextBlock Text="{x:Static loc:Resource.BirthDate}" Margin="0,0,15,0"/>
          <TextBlock Grid.Row="1" Text="{Binding BirthDate 
                   ,Converter={StaticResource BirthDeathDateConv}
                   ,ConverterParameter=BD}"
                     HorizontalAlignment="Center" Margin="0,0,15,0"/>

          <TextBlock Grid.Column="1" Text="{x:Static loc:Resource.DeathDate}"/>
          <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding DeathDate
                   ,Converter={StaticResource BirthDeathDateConv}
                   ,ConverterParameter=DD}"
                     HorizontalAlignment="Center"/>
        </Grid>

        <Border Grid.Column="2" Background="LightGray" CornerRadius="100" Width="40" Height="40"
                IsVisible="{Binding ., Converter={StaticResource PersonEmptyFieldsConv}}"
                VerticalAlignment="Center" HorizontalAlignment="Left"
                BorderBrush="Gray" BorderThickness="2">

          <icon:Icon HorizontalAlignment="Center" Value="mdi-exclamation-thick"
                     Foreground="Red"
                     FontSize="35" FontWeight="ExtraBlack"/>
        </Border>

        <Separator Grid.Row="2" Grid.ColumnSpan="3" BorderBrush="Gray"/>
      </Grid>
    </DataTemplate>
    <DataTemplate x:Key="ListTemplatePersonItemViewModel" x:DataType="IVM:PersonItemViewModel">
      <Grid ColumnDefinitions="auto auto *">
        <CheckBox IsChecked="{Binding IsSelected}">
          <i:Interaction.Behaviors>
            <ia:EventTriggerBehavior EventName="Click">
              <ia:InvokeCommandAction
                Command="{Binding $parent[UserControl].((vm:PersonListingViewModel)DataContext).CheckedCommand}"/>
            </ia:EventTriggerBehavior>
          </i:Interaction.Behaviors>
        </CheckBox>
        <Rectangle Grid.Column="1" Width="3" Height="{Binding $parent[Grid].Bounds.Height}"
                   Fill="LightGray" />

        <Grid Grid.Column="2" RowDefinitions="auto auto, auto"
              ColumnDefinitions="* auto *" Background="Transparent">
          <i:Interaction.Behaviors>
            <ia:EventTriggerBehavior EventName="PointerReleased">
              <ia:InvokeCommandAction
                Command="{Binding $parent[UserControl].((vm:PersonListingViewModel)DataContext).EditPersonCommand}"/>
            </ia:EventTriggerBehavior>
          </i:Interaction.Behaviors>

          <TextBlock Grid.Column="1"  Text="{Binding Name}" TextTrimming="CharacterEllipsis"
                       HorizontalAlignment="Center"
                       TextWrapping="Wrap" Margin="0,0,0,5"
                       FontWeight="SemiBold"/>

          <Grid Grid.Row="1" Grid.Column="1" RowDefinitions="* *" ColumnDefinitions="* *"
                HorizontalAlignment="Center">

            <TextBlock Text="{x:Static loc:Resource.BirthDate}" Margin="0,0,15,0"/>
            <TextBlock Grid.Row="1" Text="{Binding BirthDate 
                   ,Converter={StaticResource BirthDeathDateConv}
                   ,ConverterParameter=BD}"
                       HorizontalAlignment="Center" Margin="0,0,15,0"/>

            <TextBlock Grid.Column="1" Text="{x:Static loc:Resource.DeathDate}"/>
            <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding DeathDate
                   ,Converter={StaticResource BirthDeathDateConv}
                   ,ConverterParameter=DD}"
                       HorizontalAlignment="Center"/>
          </Grid>

          <Border Grid.Column="2" Background="LightGray" CornerRadius="100" Width="40" Height="40"
                  IsVisible="{Binding ., Converter={StaticResource PersonEmptyFieldsConv}}"
                  VerticalAlignment="Center" HorizontalAlignment="Left"
                  BorderBrush="Gray" BorderThickness="2">

            <icon:Icon HorizontalAlignment="Center" Value="mdi-exclamation-thick"
                     Foreground="Red"
                     FontSize="35" FontWeight="ExtraBlack"/>
          </Border>

          <Separator Grid.Row="2" Grid.ColumnSpan="3" BorderBrush="Gray"/>
        </Grid>
      </Grid>
    </DataTemplate>
  </Application.Resources>

</Application>

